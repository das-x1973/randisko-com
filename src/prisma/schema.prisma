datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  profile            UserProfile?
  images             UserImage[]
  mindfulnessProfile MindfulnessProfile?
  matchesInitiated   Match[]   @relation("UserMatches1")
  matchesReceived    Match[]   @relation("UserMatches2")
  conversations      ConversationParticipant[]
  messages           Message[]
}

model UserProfile {
  id                   String   @id @default(cuid())
  nick                 String?
  image                String?
  gender               String?
  interested_in        String?
  bio                  String?
  location             String?
  latitude             Float?
  longitude            Float?
  matching_radius      Int?
  wizard_step_completed Int?
  status               String?
  has_logged_in        Boolean
  user                 User     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model UserImage {
  id        String  @id @default(cuid())
  userId    String
  url       String
  name      String?
  isProfile Boolean
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Match {
  id           String        @id @default(cuid())
  user1Id      String
  user2Id      String
  status       String        // pending, accepted, rejected
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user1        User          @relation("UserMatches1", fields: [user1Id], references: [id])
  user2        User          @relation("UserMatches2", fields: [user2Id], references: [id])
  conversation Conversation?
}

model Conversation {
  id            String                    @id @default(cuid())
  matchId       String                    @unique
  match         Match                     @relation(fields: [matchId], references: [id])
  messages      Message[]
  lastMessageAt DateTime                  @default(now())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  isActive      Boolean                   @default(true)
  participants  ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  lastReadAt     DateTime?
  hasUnread      Boolean      @default(false)

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  contentType    String       @default("text")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isEdited       Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model MindfulnessProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  meditationExp String?
  practices     String[]
  goals         String[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

