// prisma/schema.prisma
// pnpm prisma migrate dev --name postgres_url_added
// pnpm prisma generate

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CompanyInfo {
  id              String   @id @default(cuid())
  name            String
  legalName       String
  street          String
  city            String
  postcode        String
  country         String
  emailGeneral    String
  emailPrivacy    String
  emailLegal      String
  phone           String
  registrationNo  String
  vatId           String
  socialFacebook  String?
  socialInstagram String?
  socialTwitter   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model LegalDocument {
  id          String    @id @default(cuid())
  type        String    // "privacy", "terms", "pricing"
  region      String    // Country code like "UK", "IE", "AU", etc.
  language    String    // Language code like "en", "es", etc.
  version     Int
  title       String
  content     Json
  isActive    Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  authorId    String?

  @@index([type, region, isActive])
  @@index([version])
}


model User {
  id                 String                    @id @default(cuid())
  name               String?
  email              String?                   @unique
  emailVerified      DateTime?                 @map("email_verified")
  image              String?
  role               String?                   @default("user")
  accounts           Account[]
  sessions           Session[]
  profile            UserProfile?
  images             UserImage[]
  matchesInitiated   Match[]                   @relation("UserMatches1")
  matchesReceived    Match[]                   @relation("UserMatches2")
  conversations      ConversationParticipant[]
  messages           Message[]
  activities         UserActivity[]
  isActive           Boolean                   @default(true)
  lastLoginAt        DateTime?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @default(now()) @updatedAt

  @@map("users")
  @@index([email])
  @@index([role])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  type      String   // SIGN_IN, USER_CREATED, ACCOUNT_LINKED, etc.
  provider  String
  isNewUser Boolean  @default(false)
  metadata  Json?    // For additional data
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model UserProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  nick                  String?
  image                 String?
  gender                String?
  interested_in         String?
  bio                   String?  @db.Text
  location              String?
  latitude              Float?
  longitude             Float?
  matching_radius       Int?
  wizard_step_completed Int?
  status                String?  @default("active")
  has_logged_in         Boolean  @default(false)
  lastActive            DateTime?
  preferences           Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([location])
}

model UserImage {
  id        String   @id @default(cuid())
  url       String
  userId    String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Match {
  id           String @id @default(cuid())
  initiatorId  String
  receiverId   String
  status       String
  matchedAt    DateTime?
  initiator    User   @relation("UserMatches1", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver     User   @relation("UserMatches2", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([initiatorId])
  @@index([receiverId])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([conversationId])
}

model Message {
  id              String        @id @default(cuid())
  conversationId  String
  senderId        String
  content         String        @db.Text
  sentAt          DateTime      @default(now())
  conversation    Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender          User          @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
}

model Conversation {
  id            String                   @id @default(cuid())
  startedAt     DateTime                 @default(now())
  messages      Message[]
  participants  ConversationParticipant[]
}
