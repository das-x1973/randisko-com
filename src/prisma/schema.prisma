datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Reverse relation fields
  profile       UserProfile? // One-to-one relation to UserProfile
  images        UserImage[]  // One-to-many relation to UserImage
}

model UserProfile {
  id                    String   @id @default(cuid())
  nick                  String?  // Optional text
  image                 String?  // Optional text
  gender                String?  // Optional text
  interested_in         String?  // Optional text
  bio                   String?  // Optional text
  location              String?  // Optional text
  latitude              Float?   // Double precision
  longitude             Float?   // Double precision
  matching_radius       Int?     // Integer
  wizard_step_completed Int?     // Integer
  status                String?  // Optional text
  has_logged_in         Boolean  // Boolean field

  // Relation to User (one-to-one)
  user                  User     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model UserImage {
  id        String  @id @default(cuid())
  userId    String
  url       String
  name      String? // Optional text for image name
  isProfile Boolean // Boolean to mark as profile image

  // Relation to User (one-to-many)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


